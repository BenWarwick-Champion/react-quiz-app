{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/nattu-adnan.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca9e5987.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport interface Question {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport interface QuestionState extends Question {\n    answers: string[];\n}\n\nexport enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard',\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=9&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n        }\n    ))\n}","export const shuffleArray = (array: any[]) => {\n    return([...array].sort(() => Math.random() - 0.5));\n};","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n`\n\ninterface ButtonWrapperProps {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) => \n            correct\n                ? `linear-gradient(90deg, #56ffa4, #59bc86)`\n                : !correct && userClicked\n                ? `linear-gradient(90deg, #ff5656, #c16868)`\n                : `linear-gradient(90deg, #56ccff, #6eafb4)`};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\n    }\n`","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ninterface Props {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions,\n}) => (\n    <Wrapper>\n        <p className=\"number\">\n            Question: {questionNr} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }} />\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper\n                    key={answer}\n                    correct={userAnswer?.correctAnswer === answer}\n                    userClicked={userAnswer?.answer === answer}>\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n);\n\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/nattu-adnan.c866d607.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/nattu-adnan.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Comfortaa', sans-serif;\n    }\n`\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        color: #eee;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        font-weight: 400;\n        text-align: center;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n\n`\n","import React, { useState } from 'react';\nimport { Difficulty, fetchQuizQuestions, QuestionState } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nconst TOTAL_QUESTIONS = 10;\n\nexport interface AnswerObject {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) {\n        setScore(prev => prev + 1);\n      };\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    };\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    };\n  };\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <h1>React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>Start Quiz</button>\n      ) : null}\n      {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n      {loading ? <p>Loading Questions...</p> : null}\n      {!loading && !gameOver ? <QuestionCard\n        questionNr={number + 1}\n        totalQuestions={TOTAL_QUESTIONS}\n        question={questions[number].question}\n        answers={questions[number].answers}\n        userAnswer={userAnswers ? userAnswers[number] : undefined}\n        callback={checkAnswer}\n      /> : null}\n\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ?\n        <button className=\"next\" onClick={nextQuestion}>Next Question</button> : null}\n    </Wrapper>\n    </>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}